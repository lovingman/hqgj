<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.huacainfo.ace.portal.dao.RoleDao">
    <resultMap id="BaseResultMap" type="com.huacainfo.ace.portal.model.Role">
        <id column="role_id" jdbcType="VARCHAR" property="roleId"/>
        <result column="role_name" jdbcType="VARCHAR" property="roleName"/>
        <result column="create_time" jdbcType="TIMESTAMP" property="createTime"/>
        <result column="create_user_id" jdbcType="VARCHAR" property="createUserId"/>
        <result column="remark" jdbcType="VARCHAR" property="remark"/>
        <result column="type" jdbcType="VARCHAR" property="type"/>
        <result column="syid" jdbcType="VARCHAR" property="syid"/>
    </resultMap>
    <sql id="Base_Column_List">
    role_id, role_name, create_time, create_user_id, remark, type, syid
  </sql>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.String">
    delete from role
    where role_id = #{id,jdbcType=VARCHAR}
  </delete>
    <insert id="insert" parameterType="com.huacainfo.ace.portal.model.Role">
    insert into role (role_id, role_name, create_time, 
      create_user_id, remark, type, 
      syid)
    values (#{roleId,jdbcType=VARCHAR}, #{roleName,jdbcType=VARCHAR}, #{createTime,jdbcType=TIMESTAMP}, 
      #{createUserId,jdbcType=VARCHAR}, #{remark,jdbcType=VARCHAR}, #{type,jdbcType=VARCHAR}, 
      #{syid,jdbcType=VARCHAR})
  </insert>
    <update id="updateByPrimaryKey" parameterType="com.huacainfo.ace.portal.model.Role">
    update role
    set role_name = #{roleName,jdbcType=VARCHAR},
        remark = #{remark,jdbcType=VARCHAR},
        syid = #{syid},
        type = #{type,jdbcType=VARCHAR}
    where role_id = #{roleId,jdbcType=VARCHAR}
  </update>
    <resultMap extends="BaseResultMap" id="VoResultMap" type="com.huacainfo.ace.portal.vo.RoleVo">

    </resultMap>
    <sql id="Vo_Column_List">
        t.role_id, t.role_name, t.create_time,
        t.create_user_id, t.remark ,
        a.name,t.type,t.syid,b.name typeName
    </sql>
    <sql id="From_Statement">
        from role t
        left join (select code,name from dict where categoryId='40') b on t.type=b.code
        left join users a on t.create_user_id=a.user_id where 0=0
    </sql>
    <sql id="Where_Condition">
            and (t.syid =#{condition.syid})
            <if test='condition.roleName!=null and condition.roleName!=""'>
                and t.role_name like concat(#{condition.roleName,jdbcType=VARCHAR},'%')
            </if>
    </sql>
    <select id="selectVoByPrimaryKey" parameterType="java.lang.String" resultMap="VoResultMap">
        select
            t.role_id, t.role_name, t.create_time,
            t.create_user_id, t.remark ,
            a.name,t.type,t.syid,b.name typeName
        from role t
                 left join (select code,name from dict where categoryId='40') b on t.type=b.code
                 left join users a on t.create_user_id=a.user_id
        where  t.role_id= #{id,jdbcType=VARCHAR}
    </select>
    <select id="findList" parameterType="java.lang.String" resultMap="VoResultMap">
        select m.* from (
        select
        <include refid="Vo_Column_List"/>
        <include refid="From_Statement"/>
        <include refid="Where_Condition"/>
        ) m
        <choose>
            <when test='orderBy!=null and orderBy!=""'>
                ORDER BY m.${orderBy}
            </when>
            <otherwise>
                ORDER BY m.role_id
            </otherwise>
        </choose>
        limit #{start,jdbcType=DECIMAL}, #{limit,jdbcType=DECIMAL}
    </select>
    <select id="findCount" resultType="int">
        SELECT COUNT(*)
        <include refid="From_Statement"/>
        <include refid="Where_Condition"/>
    </select>
    <select id="isExist" parameterType="com.huacainfo.ace.portal.model.Role" resultType="int">
            select count(1)
        from role
        where id = #{id,jdbcType=VARCHAR}
  </select>
    <delete id="deleteByIds">
        delete from role
        where id in
        <foreach collection="ids" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
    </delete>

    <select id="isExitRoleByRoleName" resultType="int">
      select count(1)
      from role
      where role_name = #{roleName}
    </select>

    <delete id="deleteRoleResources">
        delete from role_resources where role_id = #{roleId}
    </delete>

    <insert id="insertRoleResources">
      insert into role_resources (role_id, resources_id, create_time)
      values (#{roleId,jdbcType=VARCHAR}, #{resourcesId,jdbcType=VARCHAR}, now());
    </insert>

    <select id="findRoleResTreeList" resultType="map">
        select
            t.resources_id ID,
            t.parent_resources_id PID,
            t.resources_name TEXT,
            t.resources_icon ICON,
            if(s.resources_id is not null,
                'true',
                'false') CHECKED,
            (select count(*)
             from resources
             where resources.parent_resources_id = t.resources_id) CHILD_COUNT
        from resources t
        left join (select
                        resources_id
                    from
                        role_resources
                    where role_id = #{roleId}
                    group by resources_id) s on t.resources_id = s.resources_id
        order by t.resources_id
    </select>

    <select id="selectRoleResByRoleId" resultType="java.lang.String">
        SELECT
            m.resources_id
        FROM
            (
                SELECT
                    t.resources_id,
                    (
                        SELECT
                            count( 1 )
                        FROM
                            resources a
                        WHERE
                            a.parent_resources_id = t.resources_id
                    ) c
                FROM
                    role_resources t
                WHERE
                    t.role_id = #{roleId}
            ) m
        WHERE
            m.c =0
    </select>
</mapper>
